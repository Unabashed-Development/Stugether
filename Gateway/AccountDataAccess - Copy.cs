using Dapper;
using System.Data;
using System;

namespace Gateway
{
    public static class NotificationDataAccess
    {
        #region Methods

        public static string GetHashedPassswordFromAccount(int userID)
        {
            using (IDbConnection connection = new System.Data.SqlClient.SqlConnection(FiddleHelper.GetConnectionStringSql("StudentMatcherDB")))
            {
                return connection.QuerySingle<string>($"SELECT COUNT() FROM Match WHERE UserID2 = {userID}");
            }
        }

        /// <summary>
        /// Creates an account in the database.
        /// </summary>
        /// <param name="email">The email of the account to be added to the database.</param>
        /// <param name="password">The password of the account to be added to the database.</param>
        /// <param name="verificationCode">The verification code generated by the program.</param>
        public static void CreateAccount(string email, string password, string verificationCode)
        {
            using (IDbConnection connection = new System.Data.SqlClient.SqlConnection(FiddleHelper.GetConnectionStringSql("StudentMatcherDB")))
            {
                connection.Execute($"INSERT INTO Account(Email, Password, VerificationCode) VALUES ('{email}', '{password}', '{verificationCode}')"); // Better is to use a StoredProcedure later on
            }
        }

        /// <summary>
        /// Deletes an account from the database.
        /// </summary>
        /// <param name="email">The email of the account to be removed from the database.</param>
        public static void DeleteAccount(string email)
        {
            using (IDbConnection connection = new System.Data.SqlClient.SqlConnection(FiddleHelper.GetConnectionStringSql("StudentMatcherDB")))
            {
                connection.Execute($"DELETE FROM Account WHERE Email = '{email}'");
            }
        }

        /// <summary>
        /// Checks if the given verification code matches the verification code in the database for the account. Also sets the verified column to true (1).
        /// </summary>
        /// <param name="verificationCode">The verification code that needs to be checked with the database.</param>
        /// <param name="email">The email the verification code needs to be checked for.</param>
        /// <returns>True if the verification code matches, false if not.</returns>
        public static bool CheckIfVerificationCodeMatches(string verificationCode, string email)
        {
            string verificationCodeInDatabase = GetVerificationCodeFromAccount(email);
            if (verificationCodeInDatabase == verificationCode)
            {
                using (IDbConnection connection = new System.Data.SqlClient.SqlConnection(FiddleHelper.GetConnectionStringSql("StudentMatcherDB")))
                {
                    connection.Execute($"UPDATE Account SET AccountVerified = 1 WHERE Email = '{email}'");
                }
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Gets the verification code from an account from the database.
        /// </summary>
        /// <param name="email">The email the verification code needs to be checked for.</param>
        /// <returns>The verification code from the database for that account.</returns>
        public static string GetVerificationCodeFromAccount(string email)
        {
            using (IDbConnection connection = new System.Data.SqlClient.SqlConnection(FiddleHelper.GetConnectionStringSql("StudentMatcherDB")))
            {
               return connection.QuerySingle<string>($"SELECT VerificationCode FROM Account WHERE Email = '{email}'");
            }
        }

        /// <summary>
        /// Checks if the account is already verified.
        /// </summary>
        /// <param name="email"></param>
        /// <returns>True if it is and false if it isn't.</returns>
        public static bool CheckIfAccountIsVerified(string email)
        {
            using (IDbConnection connection = new System.Data.SqlClient.SqlConnection(FiddleHelper.GetConnectionStringSql("StudentMatcherDB")))
            {
                bool verified = connection.QuerySingle<bool>($"SELECT AccountVerified FROM Account WHERE Email = '{email}'");
                return verified;
            }
        }

        public static int GetUserIDFromAccount(string email)
        {
            using (IDbConnection connection = new System.Data.SqlClient.SqlConnection(FiddleHelper.GetConnectionStringSql("StudentMatcherDB")))
            {
                return connection.QuerySingle<int>($"SELECT UserID FROM Account WHERE Email = '{email}'");
            }
        }
        #endregion
    }
}
